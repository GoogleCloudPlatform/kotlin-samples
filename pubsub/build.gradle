/*
 * Copyright 2018 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.2.61'
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "4.1.0"
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: "org.jlleitschuh.gradle.ktlint"

mainClassName = 'com.example.pubsub.PubSubExampleKt'

defaultTasks 'run'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
}

sourceSets {
    main.java.srcDirs += "src/main"
    test.java.srcDirs += "src/test"
}

dependencies {
    compile group: 'com.google.cloud', name: 'google-cloud-pubsub', version:'1.42.0'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version:kotlin_version
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '0.24.0'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'com.google.truth', name: 'truth', version:'0.42'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version:kotlin_version
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.10"
}

jar {
    manifest {
        attributes 'Main-Class': 'com.example.pubsub.PubSubExampleKt'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}