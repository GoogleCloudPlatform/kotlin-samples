//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

@kotlin.jvm.JvmSynthetic
inline fun deadLetterPolicy(block: com.google.pubsub.v1.DeadLetterPolicyKt.Dsl.() -> Unit): com.google.pubsub.v1.DeadLetterPolicy =
  com.google.pubsub.v1.DeadLetterPolicyKt.Dsl._create(com.google.pubsub.v1.DeadLetterPolicy.newBuilder()).apply { block() }._build()
object DeadLetterPolicyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.DeadLetterPolicy.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.pubsub.v1.DeadLetterPolicy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.pubsub.v1.DeadLetterPolicy = _builder.build()

    /**
     * <pre>
     * The name of the topic to which dead letter messages should be published.
     * Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     * account associated with the enclosing subscription's parent project (i.e.,
     * service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     * </pre>
     *
     * <code>string dead_letter_topic = 1;</code>
     */
    var deadLetterTopic: kotlin.String
      @JvmName("getDeadLetterTopic")
      get() = _builder.getDeadLetterTopic()
      @JvmName("setDeadLetterTopic")
      set(value) {
        _builder.setDeadLetterTopic(value)
      }
    /**
     * <pre>
     * The name of the topic to which dead letter messages should be published.
     * Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
     * account associated with the enclosing subscription's parent project (i.e.,
     * service-{project_number}&#64;gcp-sa-pubsub.iam.gserviceaccount.com) must have
     * permission to Publish() to this topic.
     * The operation will fail if the topic does not exist.
     * Users should ensure that there is a subscription attached to this topic
     * since messages published to a topic with no subscriptions are lost.
     * </pre>
     *
     * <code>string dead_letter_topic = 1;</code>
     */
    fun clearDeadLetterTopic() {
      _builder.clearDeadLetterTopic()
    }

    /**
     * <pre>
     * The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded
     * for the message).
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * This field will be honored on a best effort basis.
     * If this parameter is 0, a default value of 5 is used.
     * </pre>
     *
     * <code>int32 max_delivery_attempts = 2;</code>
     */
    var maxDeliveryAttempts: kotlin.Int
      @JvmName("getMaxDeliveryAttempts")
      get() = _builder.getMaxDeliveryAttempts()
      @JvmName("setMaxDeliveryAttempts")
      set(value) {
        _builder.setMaxDeliveryAttempts(value)
      }
    /**
     * <pre>
     * The maximum number of delivery attempts for any message. The value must be
     * between 5 and 100.
     * The number of delivery attempts is defined as 1 + (the sum of number of
     * NACKs and number of times the acknowledgement deadline has been exceeded
     * for the message).
     * A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
     * client libraries may automatically extend ack_deadlines.
     * This field will be honored on a best effort basis.
     * If this parameter is 0, a default value of 5 is used.
     * </pre>
     *
     * <code>int32 max_delivery_attempts = 2;</code>
     */
    fun clearMaxDeliveryAttempts() {
      _builder.clearMaxDeliveryAttempts()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.DeadLetterPolicy.copy(block: com.google.pubsub.v1.DeadLetterPolicyKt.Dsl.() -> Unit): com.google.pubsub.v1.DeadLetterPolicy =
  com.google.pubsub.v1.DeadLetterPolicyKt.Dsl._create(this.toBuilder()).apply { block() }._build()
