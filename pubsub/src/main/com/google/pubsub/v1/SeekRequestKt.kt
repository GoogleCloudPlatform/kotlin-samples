//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

@kotlin.jvm.JvmSynthetic
inline fun seekRequest(block: com.google.pubsub.v1.SeekRequestKt.Dsl.() -> Unit): com.google.pubsub.v1.SeekRequest =
  com.google.pubsub.v1.SeekRequestKt.Dsl._create(com.google.pubsub.v1.SeekRequest.newBuilder()).apply { block() }._build()
object SeekRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.SeekRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.pubsub.v1.SeekRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.pubsub.v1.SeekRequest = _builder.build()

    /**
     * <pre>
     * Required. The subscription to affect.
     * </pre>
     *
     * <code>string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     */
    var subscription: kotlin.String
      @JvmName("getSubscription")
      get() = _builder.getSubscription()
      @JvmName("setSubscription")
      set(value) {
        _builder.setSubscription(value)
      }
    /**
     * <pre>
     * Required. The subscription to affect.
     * </pre>
     *
     * <code>string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     */
    fun clearSubscription() {
      _builder.clearSubscription()
    }

    /**
     * <pre>
     * The time to seek to.
     * Messages retained in the subscription that were published before this
     * time are marked as acknowledged, and messages retained in the
     * subscription that were published after this time are marked as
     * unacknowledged. Note that this operation affects only those messages
     * retained in the subscription (configured by the combination of
     * `message_retention_duration` and `retain_acked_messages`). For example,
     * if `time` corresponds to a point before the message retention
     * window (or to a point before the system's notion of the subscription
     * creation time), only retained messages will be marked as unacknowledged,
     * and already-expunged messages will not be restored.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2;</code>
     */
    var time: com.google.protobuf.Timestamp
      @JvmName("getTime")
      get() = _builder.getTime()
      @JvmName("setTime")
      set(value) {
        _builder.setTime(value)
      }
    /**
     * <pre>
     * The time to seek to.
     * Messages retained in the subscription that were published before this
     * time are marked as acknowledged, and messages retained in the
     * subscription that were published after this time are marked as
     * unacknowledged. Note that this operation affects only those messages
     * retained in the subscription (configured by the combination of
     * `message_retention_duration` and `retain_acked_messages`). For example,
     * if `time` corresponds to a point before the message retention
     * window (or to a point before the system's notion of the subscription
     * creation time), only retained messages will be marked as unacknowledged,
     * and already-expunged messages will not be restored.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2;</code>
     */
    fun clearTime() {
      _builder.clearTime()
    }
    /**
     * <pre>
     * The time to seek to.
     * Messages retained in the subscription that were published before this
     * time are marked as acknowledged, and messages retained in the
     * subscription that were published after this time are marked as
     * unacknowledged. Note that this operation affects only those messages
     * retained in the subscription (configured by the combination of
     * `message_retention_duration` and `retain_acked_messages`). For example,
     * if `time` corresponds to a point before the message retention
     * window (or to a point before the system's notion of the subscription
     * creation time), only retained messages will be marked as unacknowledged,
     * and already-expunged messages will not be restored.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 2;</code>
     * @return Whether the time field is set.
     */
    fun hasTime(): kotlin.Boolean {
      return _builder.hasTime()
    }

    /**
     * <pre>
     * The snapshot to seek to. The snapshot's topic must be the same as that of
     * the provided subscription.
     * Format is `projects/{project}/snapshots/{snap}`.
     * </pre>
     *
     * <code>string snapshot = 3 [(.google.api.resource_reference) = { ... }</code>
     */
    var snapshot: kotlin.String
      @JvmName("getSnapshot")
      get() = _builder.getSnapshot()
      @JvmName("setSnapshot")
      set(value) {
        _builder.setSnapshot(value)
      }
    /**
     * <pre>
     * The snapshot to seek to. The snapshot's topic must be the same as that of
     * the provided subscription.
     * Format is `projects/{project}/snapshots/{snap}`.
     * </pre>
     *
     * <code>string snapshot = 3 [(.google.api.resource_reference) = { ... }</code>
     */
    fun clearSnapshot() {
      _builder.clearSnapshot()
    }
    /**
     * <pre>
     * The snapshot to seek to. The snapshot's topic must be the same as that of
     * the provided subscription.
     * Format is `projects/{project}/snapshots/{snap}`.
     * </pre>
     *
     * <code>string snapshot = 3 [(.google.api.resource_reference) = { ... }</code>
     * @return Whether the snapshot field is set.
     */
    //fun hasSnapshot(): kotlin.Boolean {
    //  return _builder.hasSnapshot()
    //}
    val targetCase: com.google.pubsub.v1.SeekRequest.TargetCase
      @JvmName("getTargetCase")
      get() = _builder.getTargetCase()

    fun clearTarget() {
      _builder.clearTarget()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.SeekRequest.copy(block: com.google.pubsub.v1.SeekRequestKt.Dsl.() -> Unit): com.google.pubsub.v1.SeekRequest =
  com.google.pubsub.v1.SeekRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
