//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

@kotlin.jvm.JvmSynthetic
inline fun snapshot(block: com.google.pubsub.v1.SnapshotKt.Dsl.() -> Unit): com.google.pubsub.v1.Snapshot =
  com.google.pubsub.v1.SnapshotKt.Dsl._create(com.google.pubsub.v1.Snapshot.newBuilder()).apply { block() }._build()
object SnapshotKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.Snapshot.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.pubsub.v1.Snapshot.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.pubsub.v1.Snapshot = _builder.build()

    /**
     * <pre>
     * The name of the snapshot.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * The name of the snapshot.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * The name of the topic from which this snapshot is retaining messages.
     * </pre>
     *
     * <code>string topic = 2 [(.google.api.resource_reference) = { ... }</code>
     */
    var topic: kotlin.String
      @JvmName("getTopic")
      get() = _builder.getTopic()
      @JvmName("setTopic")
      set(value) {
        _builder.setTopic(value)
      }
    /**
     * <pre>
     * The name of the topic from which this snapshot is retaining messages.
     * </pre>
     *
     * <code>string topic = 2 [(.google.api.resource_reference) = { ... }</code>
     */
    fun clearTopic() {
      _builder.clearTopic()
    }

    /**
     * <pre>
     * The snapshot is guaranteed to exist up until this time.
     * A newly-created snapshot expires no later than 7 days from the time of its
     * creation. Its exact lifetime is determined at creation by the existing
     * backlog in the source subscription. Specifically, the lifetime of the
     * snapshot is `7 days - (age of oldest unacked message in the subscription)`.
     * For example, consider a subscription whose oldest unacked message is 3 days
     * old. If a snapshot is created from this subscription, the snapshot -- which
     * will always capture this 3-day-old backlog as long as the snapshot
     * exists -- will expire in 4 days. The service will refuse to create a
     * snapshot that would expire in less than 1 hour after creation.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 3;</code>
     */
    var expireTime: com.google.protobuf.Timestamp
      @JvmName("getExpireTime")
      get() = _builder.getExpireTime()
      @JvmName("setExpireTime")
      set(value) {
        _builder.setExpireTime(value)
      }
    /**
     * <pre>
     * The snapshot is guaranteed to exist up until this time.
     * A newly-created snapshot expires no later than 7 days from the time of its
     * creation. Its exact lifetime is determined at creation by the existing
     * backlog in the source subscription. Specifically, the lifetime of the
     * snapshot is `7 days - (age of oldest unacked message in the subscription)`.
     * For example, consider a subscription whose oldest unacked message is 3 days
     * old. If a snapshot is created from this subscription, the snapshot -- which
     * will always capture this 3-day-old backlog as long as the snapshot
     * exists -- will expire in 4 days. The service will refuse to create a
     * snapshot that would expire in less than 1 hour after creation.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 3;</code>
     */
    fun clearExpireTime() {
      _builder.clearExpireTime()
    }
    /**
     * <pre>
     * The snapshot is guaranteed to exist up until this time.
     * A newly-created snapshot expires no later than 7 days from the time of its
     * creation. Its exact lifetime is determined at creation by the existing
     * backlog in the source subscription. Specifically, the lifetime of the
     * snapshot is `7 days - (age of oldest unacked message in the subscription)`.
     * For example, consider a subscription whose oldest unacked message is 3 days
     * old. If a snapshot is created from this subscription, the snapshot -- which
     * will always capture this 3-day-old backlog as long as the snapshot
     * exists -- will expire in 4 days. The service will refuse to create a
     * snapshot that would expire in less than 1 hour after creation.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 3;</code>
     * @return Whether the expireTime field is set.
     */
    fun hasExpireTime(): kotlin.Boolean {
      return _builder.hasExpireTime()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class LabelsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
     val labels: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getLabelsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getLabelsMap()
      )
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @JvmName("putLabels")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putLabels(key, value)
       }
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setLabels")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeLabels")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .remove(key: kotlin.String) {
         _builder.removeLabels(key)
       }
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllLabels")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllLabels(map)
       }
    /**
     * <pre>
     * See [Creating and managing labels]
     * (https://cloud.google.com/pubsub/docs/labels).
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearLabels")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .clear() {
         _builder.clearLabels()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.Snapshot.copy(block: com.google.pubsub.v1.SnapshotKt.Dsl.() -> Unit): com.google.pubsub.v1.Snapshot =
  com.google.pubsub.v1.SnapshotKt.Dsl._create(this.toBuilder()).apply { block() }._build()
