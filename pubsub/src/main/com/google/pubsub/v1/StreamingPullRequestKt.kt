//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

@kotlin.jvm.JvmSynthetic
inline fun streamingPullRequest(block: com.google.pubsub.v1.StreamingPullRequestKt.Dsl.() -> Unit): com.google.pubsub.v1.StreamingPullRequest =
  com.google.pubsub.v1.StreamingPullRequestKt.Dsl._create(com.google.pubsub.v1.StreamingPullRequest.newBuilder()).apply { block() }._build()
object StreamingPullRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.StreamingPullRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.pubsub.v1.StreamingPullRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.pubsub.v1.StreamingPullRequest = _builder.build()

    /**
     * <pre>
     * Required. The subscription for which to initialize the new stream. This
     * must be provided in the first request on the stream, and must not be set in
     * subsequent requests from client to server.
     * Format is `projects/{project}/subscriptions/{sub}`.
     * </pre>
     *
     * <code>string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     */
    var subscription: kotlin.String
      @JvmName("getSubscription")
      get() = _builder.getSubscription()
      @JvmName("setSubscription")
      set(value) {
        _builder.setSubscription(value)
      }
    /**
     * <pre>
     * Required. The subscription for which to initialize the new stream. This
     * must be provided in the first request on the stream, and must not be set in
     * subsequent requests from client to server.
     * Format is `projects/{project}/subscriptions/{sub}`.
     * </pre>
     *
     * <code>string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
     */
    fun clearSubscription() {
      _builder.clearSubscription()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class AckIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @return A list containing the ackIds.
     */
    val ackIds: com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAckIdsList()
      )
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @param value The ackIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.add(value: kotlin.String) {
      _builder.addAckIds(value)
    }
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @param value The ackIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.plusAssign(value: kotlin.String) {
      _builder.addAckIds(value)
    }
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @param values The ackIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllAckIds(values)
    }
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @param values The ackIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllAckIds(values)
    }
    /**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     * @param index The index to set the value at.
     * @param value The ackIds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setAckIds(index, value)
    }/**
     * <pre>
     * List of acknowledgement IDs for acknowledging previously received messages
     * (received on this stream or a different stream). If an ack ID has expired,
     * the corresponding message may be redelivered later. Acknowledging a message
     * more than once will not result in an error. If the acknowledgement ID is
     * malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated string ack_ids = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, AckIdsProxy>.clear() {
      _builder.clearAckIds()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ModifyDeadlineSecondsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     */
     val modifyDeadlineSeconds: com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getModifyDeadlineSecondsList()
      )
    /**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     * @param value The modifyDeadlineSeconds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addModifyDeadlineSeconds")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.add(value: kotlin.Int) {
      _builder.addModifyDeadlineSeconds(value)
    }/**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     * @param value The modifyDeadlineSeconds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignModifyDeadlineSeconds")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.plusAssign(value: kotlin.Int) {
      add(value)
    }/**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     * @param values The modifyDeadlineSeconds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllModifyDeadlineSeconds")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.Int>) {
      _builder.addAllModifyDeadlineSeconds(values)
    }/**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     * @param values The modifyDeadlineSeconds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllModifyDeadlineSeconds")
    inline operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.Int>) {
      addAll(values)
    }/**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     * @param index The index to set the value at.
     * @param value The modifyDeadlineSeconds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setModifyDeadlineSeconds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.set(index: kotlin.Int, value: kotlin.Int) {
      _builder.setModifyDeadlineSeconds(index, value)
    }/**
     * <pre>
     * The list of new ack deadlines for the IDs listed in
     * `modify_deadline_ack_ids`. The size of this list must be the same as the
     * size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
     * with `INVALID_ARGUMENT`. Each element in this list is applied to the
     * element in the same position in `modify_deadline_ack_ids`. The new ack
     * deadline is with respect to the time this request was sent to the Pub/Sub
     * system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
     * will expire 10 seconds after this request is received. If the value is 0,
     * the message is immediately made available for another streaming or
     * non-streaming pull request. If the value is &lt; 0 (an error), the stream will
     * be aborted with status `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>repeated int32 modify_deadline_seconds = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearModifyDeadlineSeconds")
    fun com.google.protobuf.kotlin.DslList<kotlin.Int, ModifyDeadlineSecondsProxy>.clear() {
      _builder.clearModifyDeadlineSeconds()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ModifyDeadlineAckIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @return A list containing the modifyDeadlineAckIds.
     */
    val modifyDeadlineAckIds: com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getModifyDeadlineAckIdsList()
      )
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @param value The modifyDeadlineAckIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addModifyDeadlineAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.add(value: kotlin.String) {
      _builder.addModifyDeadlineAckIds(value)
    }
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @param value The modifyDeadlineAckIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignModifyDeadlineAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.plusAssign(value: kotlin.String) {
      _builder.addModifyDeadlineAckIds(value)
    }
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @param values The modifyDeadlineAckIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllModifyDeadlineAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllModifyDeadlineAckIds(values)
    }
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @param values The modifyDeadlineAckIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllModifyDeadlineAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllModifyDeadlineAckIds(values)
    }
    /**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     * @param index The index to set the value at.
     * @param value The modifyDeadlineAckIds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setModifyDeadlineAckIds")
    operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setModifyDeadlineAckIds(index, value)
    }/**
     * <pre>
     * List of acknowledgement IDs whose deadline will be modified based on the
     * corresponding element in `modify_deadline_seconds`. This field can be used
     * to indicate that more time is needed to process a message by the
     * subscriber, or to make the message available for redelivery if the
     * processing was interrupted.
     * </pre>
     *
     * <code>repeated string modify_deadline_ack_ids = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearModifyDeadlineAckIds")
    fun com.google.protobuf.kotlin.DslList<kotlin.String, ModifyDeadlineAckIdsProxy>.clear() {
      _builder.clearModifyDeadlineAckIds()
    }
    /**
     * <pre>
     * Required. The ack deadline to use for the stream. This must be provided in
     * the first request on the stream, but it can also be updated on subsequent
     * requests from client to server. The minimum deadline you can specify is 10
     * seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
     * </pre>
     *
     * <code>int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    var streamAckDeadlineSeconds: kotlin.Int
      @JvmName("getStreamAckDeadlineSeconds")
      get() = _builder.getStreamAckDeadlineSeconds()
      @JvmName("setStreamAckDeadlineSeconds")
      set(value) {
        _builder.setStreamAckDeadlineSeconds(value)
      }
    /**
     * <pre>
     * Required. The ack deadline to use for the stream. This must be provided in
     * the first request on the stream, but it can also be updated on subsequent
     * requests from client to server. The minimum deadline you can specify is 10
     * seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
     * </pre>
     *
     * <code>int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    fun clearStreamAckDeadlineSeconds() {
      _builder.clearStreamAckDeadlineSeconds()
    }

    /**
     * <pre>
     * A unique identifier that is used to distinguish client instances from each
     * other. Only needs to be provided on the initial request. When a stream
     * disconnects and reconnects for the same stream, the client_id should be set
     * to the same value so that state associated with the old stream can be
     * transferred to the new stream. The same client_id should not be used for
     * different client instances.
     * </pre>
     *
     * <code>string client_id = 6;</code>
     */
    var clientId: kotlin.String
      @JvmName("getClientId")
      get() = _builder.getClientId()
      @JvmName("setClientId")
      set(value) {
        _builder.setClientId(value)
      }
    /**
     * <pre>
     * A unique identifier that is used to distinguish client instances from each
     * other. Only needs to be provided on the initial request. When a stream
     * disconnects and reconnects for the same stream, the client_id should be set
     * to the same value so that state associated with the old stream can be
     * transferred to the new stream. The same client_id should not be used for
     * different client instances.
     * </pre>
     *
     * <code>string client_id = 6;</code>
     */
    fun clearClientId() {
      _builder.clearClientId()
    }

    /**
     * <pre>
     * Flow control settings for the maximum number of outstanding messages. When
     * there are `max_outstanding_messages` or more currently sent to the
     * streaming pull client that have not yet been acked or nacked, the server
     * stops sending more messages. The sending of messages resumes once the
     * number of outstanding messages is less than this value. If the value is
     * &lt;= 0, there is no limit to the number of outstanding messages. This
     * property can only be set on the initial StreamingPullRequest. If it is set
     * on a subsequent request, the stream will be aborted with status
     * `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>int64 max_outstanding_messages = 7;</code>
     */
    var maxOutstandingMessages: kotlin.Long
      @JvmName("getMaxOutstandingMessages")
      get() = _builder.getMaxOutstandingMessages()
      @JvmName("setMaxOutstandingMessages")
      set(value) {
        _builder.setMaxOutstandingMessages(value)
      }
    /**
     * <pre>
     * Flow control settings for the maximum number of outstanding messages. When
     * there are `max_outstanding_messages` or more currently sent to the
     * streaming pull client that have not yet been acked or nacked, the server
     * stops sending more messages. The sending of messages resumes once the
     * number of outstanding messages is less than this value. If the value is
     * &lt;= 0, there is no limit to the number of outstanding messages. This
     * property can only be set on the initial StreamingPullRequest. If it is set
     * on a subsequent request, the stream will be aborted with status
     * `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>int64 max_outstanding_messages = 7;</code>
     */
    fun clearMaxOutstandingMessages() {
      _builder.clearMaxOutstandingMessages()
    }

    /**
     * <pre>
     * Flow control settings for the maximum number of outstanding bytes. When
     * there are `max_outstanding_bytes` or more worth of messages currently sent
     * to the streaming pull client that have not yet been acked or nacked, the
     * server will stop sending more messages. The sending of messages resumes
     * once the number of outstanding bytes is less than this value. If the value
     * is &lt;= 0, there is no limit to the number of outstanding bytes. This
     * property can only be set on the initial StreamingPullRequest. If it is set
     * on a subsequent request, the stream will be aborted with status
     * `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>int64 max_outstanding_bytes = 8;</code>
     */
    var maxOutstandingBytes: kotlin.Long
      @JvmName("getMaxOutstandingBytes")
      get() = _builder.getMaxOutstandingBytes()
      @JvmName("setMaxOutstandingBytes")
      set(value) {
        _builder.setMaxOutstandingBytes(value)
      }
    /**
     * <pre>
     * Flow control settings for the maximum number of outstanding bytes. When
     * there are `max_outstanding_bytes` or more worth of messages currently sent
     * to the streaming pull client that have not yet been acked or nacked, the
     * server will stop sending more messages. The sending of messages resumes
     * once the number of outstanding bytes is less than this value. If the value
     * is &lt;= 0, there is no limit to the number of outstanding bytes. This
     * property can only be set on the initial StreamingPullRequest. If it is set
     * on a subsequent request, the stream will be aborted with status
     * `INVALID_ARGUMENT`.
     * </pre>
     *
     * <code>int64 max_outstanding_bytes = 8;</code>
     */
    fun clearMaxOutstandingBytes() {
      _builder.clearMaxOutstandingBytes()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.StreamingPullRequest.copy(block: com.google.pubsub.v1.StreamingPullRequestKt.Dsl.() -> Unit): com.google.pubsub.v1.StreamingPullRequest =
  com.google.pubsub.v1.StreamingPullRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
