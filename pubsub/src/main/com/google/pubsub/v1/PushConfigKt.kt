//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

package com.google.pubsub.v1;

@kotlin.jvm.JvmSynthetic
inline fun pushConfig(block: com.google.pubsub.v1.PushConfigKt.Dsl.() -> Unit): com.google.pubsub.v1.PushConfig =
  com.google.pubsub.v1.PushConfigKt.Dsl._create(com.google.pubsub.v1.PushConfig.newBuilder()).apply { block() }._build()
object PushConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.PushConfig.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.pubsub.v1.PushConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.pubsub.v1.PushConfig = _builder.build()

    /**
     * <pre>
     * A URL locating the endpoint to which messages should be pushed.
     * For example, a Webhook endpoint might use `https://example.com/push`.
     * </pre>
     *
     * <code>string push_endpoint = 1;</code>
     */
    var pushEndpoint: kotlin.String
      @JvmName("getPushEndpoint")
      get() = _builder.getPushEndpoint()
      @JvmName("setPushEndpoint")
      set(value) {
        _builder.setPushEndpoint(value)
      }
    /**
     * <pre>
     * A URL locating the endpoint to which messages should be pushed.
     * For example, a Webhook endpoint might use `https://example.com/push`.
     * </pre>
     *
     * <code>string push_endpoint = 1;</code>
     */
    fun clearPushEndpoint() {
      _builder.clearPushEndpoint()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class AttributesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
     val attributes: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getAttributesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getAttributesMap()
      )
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
    @JvmName("putAttributes")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putAttributes(key, value)
       }
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setAttributes")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeAttributes")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .remove(key: kotlin.String) {
         _builder.removeAttributes(key)
       }
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllAttributes")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllAttributes(map)
       }
    /**
     * <pre>
     * Endpoint configuration attributes that can be used to control different
     * aspects of the message delivery.
     * The only currently supported attribute is `x-goog-version`, which you can
     * use to change the format of the pushed message. This attribute
     * indicates the version of the data expected by the endpoint. This
     * controls the shape of the pushed message (i.e., its fields and metadata).
     * If not present during the `CreateSubscription` call, it will default to
     * the version of the Pub/Sub API used to make such call. If not present in a
     * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
     * calls will always return a valid version, even if the subscription was
     * created without this attribute.
     * The only supported values for the `x-goog-version` attribute are:
     * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
     * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
     * For example:
     * &lt;pre&gt;&lt;code&gt;attributes { "x-goog-version": "v1" } &lt;/code&gt;&lt;/pre&gt;
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearAttributes")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, AttributesProxy>
      .clear() {
         _builder.clearAttributes()
       }

    /**
     * <pre>
     * If specified, Pub/Sub will generate and attach an OIDC JWT token as an
     * `Authorization` header in the HTTP request for every pushed message.
     * </pre>
     *
     * <code>.google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;</code>
     */
    var oidcToken: com.google.pubsub.v1.PushConfig.OidcToken
      @JvmName("getOidcToken")
      get() = _builder.getOidcToken()
      @JvmName("setOidcToken")
      set(value) {
        _builder.setOidcToken(value)
      }
    /**
     * <pre>
     * If specified, Pub/Sub will generate and attach an OIDC JWT token as an
     * `Authorization` header in the HTTP request for every pushed message.
     * </pre>
     *
     * <code>.google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;</code>
     */
    fun clearOidcToken() {
      _builder.clearOidcToken()
    }
    /**
     * <pre>
     * If specified, Pub/Sub will generate and attach an OIDC JWT token as an
     * `Authorization` header in the HTTP request for every pushed message.
     * </pre>
     *
     * <code>.google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;</code>
     * @return Whether the oidcToken field is set.
     */
    fun hasOidcToken(): kotlin.Boolean {
      return _builder.hasOidcToken()
    }
    val authenticationMethodCase: com.google.pubsub.v1.PushConfig.AuthenticationMethodCase
      @JvmName("getAuthenticationMethodCase")
      get() = _builder.getAuthenticationMethodCase()

    fun clearAuthenticationMethod() {
      _builder.clearAuthenticationMethod()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun oidcToken(block: com.google.pubsub.v1.PushConfigKt.OidcTokenKt.Dsl.() -> Unit): com.google.pubsub.v1.PushConfig.OidcToken =
    com.google.pubsub.v1.PushConfigKt.OidcTokenKt.Dsl._create(com.google.pubsub.v1.PushConfig.OidcToken.newBuilder()).apply { block() }._build()
  object OidcTokenKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: com.google.pubsub.v1.PushConfig.OidcToken.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.google.pubsub.v1.PushConfig.OidcToken.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.google.pubsub.v1.PushConfig.OidcToken = _builder.build()

      /**
       * <pre>
       * [Service account
       * email](https://cloud.google.com/iam/docs/service-accounts)
       * to be used for generating the OIDC token. The caller (for
       * CreateSubscription, UpdateSubscription, and ModifyPushConfig RPCs) must
       * have the iam.serviceAccounts.actAs permission for the service account.
       * </pre>
       *
       * <code>string service_account_email = 1;</code>
       */
      var serviceAccountEmail: kotlin.String
        @JvmName("getServiceAccountEmail")
        get() = _builder.getServiceAccountEmail()
        @JvmName("setServiceAccountEmail")
        set(value) {
          _builder.setServiceAccountEmail(value)
        }
      /**
       * <pre>
       * [Service account
       * email](https://cloud.google.com/iam/docs/service-accounts)
       * to be used for generating the OIDC token. The caller (for
       * CreateSubscription, UpdateSubscription, and ModifyPushConfig RPCs) must
       * have the iam.serviceAccounts.actAs permission for the service account.
       * </pre>
       *
       * <code>string service_account_email = 1;</code>
       */
      fun clearServiceAccountEmail() {
        _builder.clearServiceAccountEmail()
      }

      /**
       * <pre>
       * Audience to be used when generating OIDC token. The audience claim
       * identifies the recipients that the JWT is intended for. The audience
       * value is a single case-sensitive string. Having multiple values (array)
       * for the audience field is not supported. More info about the OIDC JWT
       * token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
       * Note: if not specified, the Push endpoint URL will be used.
       * </pre>
       *
       * <code>string audience = 2;</code>
       */
      var audience: kotlin.String
        @JvmName("getAudience")
        get() = _builder.getAudience()
        @JvmName("setAudience")
        set(value) {
          _builder.setAudience(value)
        }
      /**
       * <pre>
       * Audience to be used when generating OIDC token. The audience claim
       * identifies the recipients that the JWT is intended for. The audience
       * value is a single case-sensitive string. Having multiple values (array)
       * for the audience field is not supported. More info about the OIDC JWT
       * token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
       * Note: if not specified, the Push endpoint URL will be used.
       * </pre>
       *
       * <code>string audience = 2;</code>
       */
      fun clearAudience() {
        _builder.clearAudience()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.PushConfig.copy(block: com.google.pubsub.v1.PushConfigKt.Dsl.() -> Unit): com.google.pubsub.v1.PushConfig =
  com.google.pubsub.v1.PushConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun com.google.pubsub.v1.PushConfig.OidcToken.copy(block: com.google.pubsub.v1.PushConfigKt.OidcTokenKt.Dsl.() -> Unit): com.google.pubsub.v1.PushConfig.OidcToken =
  com.google.pubsub.v1.PushConfigKt.OidcTokenKt.Dsl._create(this.toBuilder()).apply { block() }._build()
